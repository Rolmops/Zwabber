/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
.button-big {
  background-color: red;
  -moz-border-radius: 28px;
  -webkit-border-radius: 28px;
  border-radius: 28px;
  cursor: pointer;
  color: #ffffff;
  font-family: Arial;
  font-size: 17px;
  padding: 16px 31px;
  text-decoration: none;
  position: absolute;
  margin: 0 auto; }

.button-big:hover {
  background-color: red; }

.button-big:active {
  position: relative;
  top: 1px; }

.topbar-box {
  width: 100%;
  height: 70px;
  border-bottom: 1px solid rgba(255, 255, 255, 0.2); }
  .topbar-box h1 {
    color: white;
    font-family: 'Open Sans', sans-serif;
    font-weight: 600;
    margin: 0;
    padding: 10px 0 0 250px;
    font-size: 30px;
    text-transform: uppercase;
    width: 10%; }
  .topbar-box ul {
    float: right;
    width: 40%;
    height: 70px;
    margin: 25px 20px 0 0; }
  .topbar-box li {
    float: left;
    padding: 0px 20px 0 40px;
    list-style-type: none; }
  .topbar-box a {
    text-decoration: none;
    color: white;
    font-family: 'Open Sans', sans-serif;
    font-weight: 300;
    font-size: 18px; }

.content-box {
  height: 550px;
  *zoom: 1;
  width: auto;
  max-width: 60%;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0; }
  .content-box:before, .content-box:after {
    content: '';
    display: table; }
  .content-box:after {
    clear: both; }
  .content-box div {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 38.2%;
    margin-left: 0%;
    margin-right: 3%;
    height: 550px; }
    .content-box div:before, .content-box div:after {
      content: '';
      display: table; }
    .content-box div:after {
      clear: both; }
    .content-box div:last-child {
      margin-right: 0%; }
  .content-box aside {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 58.8%;
    margin-left: 0%;
    margin-right: 3%;
    height: 550px;
    background-image: url("../img/intro.png");
    background-repeat: no-repeat;
    z-index: -5; }
    .content-box aside:before, .content-box aside:after {
      content: '';
      display: table; }
    .content-box aside:after {
      clear: both; }
    .content-box aside:last-child {
      margin-right: 0%; }
  .content-box img {
    margin: 150px 0 0 0; }
  .content-box h2 {
    color: white;
    font-family: 'Open Sans', sans-serif;
    font-weight: 600;
    font-size: 40px;
    margin: 0px 0 0 0; }
  .content-box span {
    color: white;
    font-family: 'Open Sans', sans-serif;
    font-weight: 100;
    font-size: 20px;
    line-height: 2; }

#spacer {
  background-image: url("../img/border.png");
  background-size: 100%;
  background-repeat: no-repeat;
  height: 60px; }

.body {
  width: 100%;
  height: auto;
  background-color: white;
  z-index: 999; }
  .body h2 {
    font-family: 'Open Sans', sans-serif;
    font-weight: 600;
    font-size: 35px;
    text-align: center;
    margin: 0px 0 0 0;
    padding: 50px 0 0 0;
    text-transform: uppercase; }
  .body p {
    color: #f15a6a;
    font-family: 'Open Sans', sans-serif;
    font-weight: 100;
    font-size: 20px;
    line-height: 1.5;
    text-align: center; }

.grid {
  height: 550px;
  margin: 80px 0 0 0;
  *zoom: 1;
  width: auto;
  max-width: 65%;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0; }
  .grid:before, .grid:after {
    content: '';
    display: table; }
  .grid:after {
    clear: both; }
  .grid aside {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 38.2%;
    margin-left: 0%;
    margin-right: 3%;
    height: 350px; }
    .grid aside:before, .grid aside:after {
      content: '';
      display: table; }
    .grid aside:after {
      clear: both; }
    .grid aside:last-child {
      margin-right: 0%; }
    .grid aside img {
      width: 100%; }
  .grid div {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 58.8%;
    margin-left: 0%;
    margin-right: 3%;
    height: 350px; }
    .grid div:before, .grid div:after {
      content: '';
      display: table; }
    .grid div:after {
      clear: both; }
    .grid div:last-child {
      margin-right: 0%; }
  .grid h3 {
    font-family: 'Open Sans', sans-serif;
    font-weight: 600;
    font-size: 22px;
    margin: 0px 0 0 0;
    padding: 80px 0 0 30px;
    text-transform: uppercase; }
  .grid p {
    color: #4a4747;
    font-size: 16px;
    text-align: left;
    padding: 0 0 0 30px; }

body {
  margin: 0;
  padding: 0;
  background-image: url("../img/bg.png");
  height: 800px;
  width: 100%;
  background-size: cover;
  background-repeat: no-repeat; }

p {
  color: #4a4747;
  font-family: 'Open Sans', sans-serif;
  font-weight: 100;
  font-size: 16px;
  line-height: 1.5; }

/*# sourceMappingURL=output.css.map */
